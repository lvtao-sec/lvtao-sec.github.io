# Concurrency and distributed systems
- Lamport and vector clocks represents partial orders of events in distributed systems.
- Lamport clock can only show the order of events when you know they have a causality (i.e., happens-before relation). But vector clocks can show 1) whether two events are causally related and 2) if so, what their order is.

[1]. [Lamport and vector clock](https://lotabout.me/2022/Lamport-Clock-and-Vector-Clock/)

# Formal methods

- [Lectures of model checking](https://web.stanford.edu/class/cs357/lecture12.pdf)
- [Dynamic Partial-Order Reduction for Model Checking Software](https://users.soe.ucsc.edu/~cormac/papers/popl05.pdf)
- [Partial-Order Methods for the Veri cation of Concurrent Systems](https://patricegodefroid.github.io/public_psfiles/thesis.pdf)
    > 
    > Model checking is an approach to exploring states
    in an model abstracted from implementations for checking
    the conformance to the specification/properties.
    Here the model can be in different froms, such as,
    finite state machine with S: states, T: transitions.
    >
    > Due to the need of exploring all states, it faces state explosion.
    Especially in the concurrent systems, the partial orders between
    concurrent transitions make the search space larger.
    To solve this problem,
    previous works proposed **statically** and **dynamically**
    partial order reduction,
    which skips exploring different order os transitions
    which are independent.
    >
    > Statically: persistent set, sleep set (**TODO**)
    >
    > Dynamically: 

# File systems / Storage

- [A Casefor RedundantArrays of InexpensiveDisks (RAID)](https://www.cs.cmu.edu/~garth/RAIDpaper/Patterson88.pdf)

http://www.ssdfans.com/?p=8210
https://blog.csdn.net/fengxiaocheng/article/details/103258791
https://www.cnblogs.com/zhangsanlisi411/articles/16751546.html

PCIe consists of:
- Memory space: the physical address of memory space can be directly mapped to virtuall address and accessed by load and store instructions.
- IO space:


# Linux kernel / OS kernel
- [rCore-Tutorial-Book: unix-like OS written in Rust](https://rcore-os.cn/rCore-Tutorial-Book-v3/index.html)
- [Eliminating Receive Livelock in an Interrupt-driven Kernel](https://cs.nyu.edu/~mwalfish/classes/ut/f09-cs395t/ref/mogul96usenix.pdf)

# Virtualization

- [Writing a hypervisor from sctratch](https://rayanfam.com/tutorials/)
- Book: Hardware and Software Support for Virtualization

# Kernel bypass

- Junction
- DPDK

# Unread from CCS2023

- Put Your Memory in Order: Efficient Domain-based Memory Isolation for WASM Applications
- Improving Security Tasks Using Compiler Provenance Information Recovered At the Binary-Level
- SyzDirect: Directed Greybox Fuzzing for Linux Kernel
- Formalizing, Verifying and Applying ISA Security Guarantees as Universal Contracts
- PANIC: PAN-assisted Intra-process Memory Isolation on ARM
- SpecVerilog: Adapting Information Flow Control for Secure Speculation
- Assume but Verify: Deductive Verification of Leaked Information in Concurrent Applications
- The Locality of Memory Checking
- PyRTFuzz: Detecting Bugs in Python Runtimes via Two-Level Collaborative Fuzzing
- SymGX: Detecting Cross-boundary Pointer Vulnerabilities of SGX Applications via Static Symbolic Execution
- HODOR: Shrinking Attack Surface on Node.js via System Call Limitation
- Secure and Timely GPU Execution in Cyber-physical Systems
- SysPart: Automated Temporal System Call Filtering for Binaries

# Architecture

- RISC/CISC, SoC, bus, north birdge, sourth bridge or I/O Controller Hub (ICH) or a Platform Controller Hub (PCH)

[1]. https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/ia-introduction-basics-paper.pdf

# Performance

- Latency:
- Throughout:
- Bandwidth:
